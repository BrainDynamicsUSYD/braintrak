classdef reduced_b_ratio < mcmc.model.reduced
	% This model is set up to fit t0 keeping the prior fixed if the alpha peak is not present
	% Note that prepare_for_fit must be used before spectrum() can be used
	% Uniform priors and DB initial fit

	properties
	end


	methods
		function self = reduced_b_ratio() % Constructor
			self.name = 'model_reduced_b_ratio';
			self.n_params = 7;
			self.param_names = {'X','Y','Z','Alpha','Beta/Alpha','t0','EMGa'};
			self.param_symbols = {'X','Y','Z','\alpha','\beta/\alpha','t_0','A_{EMG}'};
			self.param_units = {'','','','s^{-1}','','ms',''};

			self.n_fitted = 7;
			self.skip_fit = zeros(1,self.n_fitted);
			self.initial_step_size = 0.05.*[0.2 0.2 0.2 5 10 0.02 0.05];
		   	self.limits = [ eps  -1   eps       10      1    0.075   0  ;...
		      		        1     1     1      100      20    0.14    5  ];

		    self.kmax = 4; % Number of modes to simulate
			self.p = model.params;
			self.p.phin = 1e-5;

			% Limits based on stability_3d and for reduced model, classic tent
			% Somewhat tighter ranges
			% EMG ranges based on spectfit output generated by sacha, speciically spec10000113.fit
		end


		function p = p_from_params(self,fitted_params) % Map parameters to point
			p = p_from_params@mcmc.model.reduced(self,fitted_params);
			p.beta(:) = fitted_params(4)*fitted_params(5);
		end
		
		function params = params_from_p(self,p) % Map point to parameters
			params = [p.xyz p.alpha(1) p.beta(1)/p.alpha(1) p.t0 p.emg_a];
		end

		function [chisq,P] = objective(self,pars) % Calculate the objective
			% DON'T FORGET THAT MCMC.MODEL.FULL.OBJECTIVE HAS A CHECK FOR BETA/ALPHA<20
			pars(5) = pars(4)*pars(5); % Calculate beta
			[chisq,P] = objective@mcmc.model.reduced(self,pars);
		end
		
		function [initial_values,prior_pp] = initialize_fit(self,target_f,target_P) % Return the first posterior/prior and initial values
			[initial_values,prior_pp] = initialize_fit@mcmc.model.reduced(self,target_f,target_P);
			initial_values(5) = initial_values(5)/initial_values(4);
			prior_pp = self.uniform_priors();
		end
		
	end
end


