classdef full_emgf < mcmc.model.full
	% This model is set up to fit t0 keeping the prior fixed if the alpha peak is not present
	% Note that prepare_for_fit must be used before spectrum() can be used
	% Uniform priors and DB initial fit

	properties
	end


	methods
		function self = full_emgf() % Constructor
			self.name = 'model_full_emgf';
			self.n_params = 10;
			self.param_names = {'Gee','Gei','Gese','Gesre','Gsrs','Alpha','Beta','t0','EMGa','EMGf'};
			self.param_symbols = {'G_{ee}','G_{ei}','G_{ese}','G_{esre}','G_{srs}','\alpha','\beta','t_0','A_{EMG}','f_{EMG}'};
			self.param_units = {'','','','','','s^{-1}','s^{-1}','ms','','Hz'};

			self.n_fitted = 10;
			self.skip_fit = zeros(1,self.n_fitted);

			self.initial_step_size = [0.4  0.4  1  1  0.2  5  40  0.005  0.05 0.2];
		   	self.limits = [ eps  -40        eps     -40      -5      10      100    0.075   0  10;...
		      		        20   -eps       40      -eps      -eps      100    800    0.14   1  50];
			
			self.kmax = 4;
			self.k0 = 10; % Volume conduction parameter
			self.p = model.params;
			self.p.phin = 1e-5;
			% Limits based on stability_3d
			% Somewhat tighter ranges
			% EMG ranges based on spectfit output generated by sacha, speciically spec10000113.fit
		end

		function p = p_from_params(self,fitted_params) % Map parameters to point
			p = p_from_params@mcmc.model.full(self,fitted_params);
			p.emg_f = fitted_params(10);
		end
		
		function params = params_from_p(self,p) % Map point to parameters
			params = [p.gabcd p.alpha(1) p.beta(1) p.t0 p.emg_a p.emg_f];
		end


		function [chisq,P] = objective(self,pars) % Calculate the objective
			P = [];
			chisq = NaN;

		    if self.compute_Mtot % If this flag has been set to false, then these fields are already present
		        % Should be fine to let that just throw an undefined variable error later if this isn't the case
		       self.stab_Mtot = exp(1i*self.stab_w*pars(8));
		       self.spec_Mtot = exp(1i*self.spec_w*pars(8));
		    end

			stab_L = 1./((1-1i*self.stab_w/pars(6)).*(1-1i*self.stab_w/pars(7)));
		    spec_L = 1./((1-1i*self.spec_w/pars(6)).*(1-1i*self.spec_w/pars(7)));

		    stab_gamma_prefactor = self.stab_gamma_prefactor;
		    d=(stab_gamma_prefactor.*(1-stab_L.*pars(2))-stab_L.*pars(1)).*(1-stab_L.*stab_L.*pars(5))-stab_L.*stab_L.*self.stab_Mtot.*(pars(3) + stab_L.*pars(4));      

		    stab=d(1)>0 && ~any(real(d(2:end))<0 & imag(d(2:end)).*imag(d(1:end-1))<0);

		    if ~stab
		    	return
		    end

		    % And the spectrum
		    Jei_oneminus = 1-spec_L.*pars(2);
		    Jsrs_oneminus = 1-spec_L.*spec_L.*pars(5);

		    re2 = self.p.re.^2;

		    q2re2 = (self.spec_gamma_prefactor - 1./(Jei_oneminus).*(spec_L.*pars(1) + ((spec_L.*spec_L.*pars(3) + spec_L.*spec_L.*spec_L.*pars(4)).*self.spec_Mtot)./(Jsrs_oneminus)));
		    T_prefactor = spec_L.*spec_L.*self.p.phin./(Jei_oneminus.*Jsrs_oneminus);
		    % T prefactor doesn't have a exp(i*omega*t0/2) term because the modulus of this is 1
		    P = zeros(size(self.spec_w));

		    k2u = self.k2u;
		    k2_volconduct = self.k2_volconduct;

		    for j = 1:size(k2u,1)
		        P = P + k2u(j,2).*abs(T_prefactor./(k2u(j,1)*re2+q2re2)).^2 * k2_volconduct(j); % For use with the efficient way
		    end

		    emg = (self.spec_w/(2*pi*pars(10))).^2./(1+(self.spec_w/(2*pi*pars(10))).^2).^2;

		    P = P + 1e-12*pars(9)*emg; % Add the EMG component
		    
		    P = P./utils.mex_trapz(self.target_f(self.weights>0),P(self.weights>0));
		    P = self.normalization_target*P;
		    sqdiff = (abs(P-self.target_P)./self.target_P).^2; % This is the squared fractional difference
		    chisq = sum(sqdiff(:).*self.weights(:));
		end
		
		function [initial_values,prior_pp] = initialize_fit(self,target_f,target_P) % Return the first posterior/prior and initial values
			[initial_values,~] = initialize_fit@mcmc.model.full(self,target_f,target_P);
			initial_values(10) = 40;
			prior_pp = self.uniform_priors();
		end

	end
end


