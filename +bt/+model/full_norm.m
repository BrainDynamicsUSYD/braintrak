classdef full_norm < bt.model.full
	% This model is set up to fit t0 keeping the prior fixed if the alpha peak is not present
	% Note that prepare_for_fit must be used before spectrum() can be used
	% Uniform priors and DB initial fit

	properties

	end


	methods
		function self = full_norm() % Constructor
			self.name = 'model_full_norm';
			self.n_params = 10;
			self.param_names = {'Gee','Gei','Gese','Gesre','Gsrs','Alpha','Beta','t0','EMGa','lnorm'};
			self.param_symbols = {'G_{ee}','G_{ei}','G_{ese}','G_{esre}','G_{srs}','\alpha','\beta','t_0','A_{EMG}','lnorm'};
			self.param_units = {'','','','','','s^{-1}','s^{-1}','ms','',''};

			self.n_fitted = 10;
			self.skip_fit = zeros(1,self.n_fitted);

			self.initial_step_size = [0.4  0.4  1  1  0.2  5  40  0.005  0.0001 0.01];
		   	self.limits = [ eps  -40        eps     -40      -14      10      100    0.075   0      0.1;...
		      		        20   -eps       40      -eps      -eps      100    800    0.14   0.01   10];
			
			self.kmax = 4;
			self.k0 = 10; % Volume conduction parameter
			self.p = model.params;
			self.p.phin = 1e-5;
			% Limits based on stability_3d
			% Somewhat tighter ranges
			% EMG ranges based on spectfit output generated by sacha, speciically spec10000113.fit
		end

	

		function [chisq,P] = objective(self,pars) % Calculate the objective
			[chisq,P] = objective@bt.model.full(self,pars(1:9));
			if isfinite(chisq)
			    P = pars(10)*P;
			    sqdiff = (abs(P-self.target_P)./self.target_P).^2; % This is the squared fractional difference
			    chisq = sum(sqdiff(:).*self.weights(:));
			end
		end
		
		function [initial_values,prior_pp] = initialize_fit(self,target_f,target_P) % Return the first posterior/prior and initial values
			[f1,P1,idx,db_data] = db_fit.quick_fit(self,target_f,target_P);
			%loglog(target_f,target_P,f1,P1)
			a =  db_data.gab(idx,:);
			p = model.params(db_data.iswake(idx));

			initial_values =  [a(1) a(2) a(3)*a(4) a(3)*a(5)*a(7) a(5)*a(8) p.alpha(1) p.beta(1) p.t0 0 1];

			prior_pp = self.uniform_priors();
		end
	end
end


